var Color =
{
    hexToRgb: function (hex, opacity)
    {
        var colors = { 'aliceblue': '#f0f8ff', 'antiquewhite': '#faebd7', 'aqua': '#00ffff', 'aquamarine': '#7fffd4', 'azure': '#f0ffff', 'beige': '#f5f5dc', 'bisque': '#ffe4c4', 'black': '#000000', 'blanchedalmond': '#ffebcd', 'blue': '#0000ff', 'blueviolet': '#8a2be2', 'brown': '#a52a2a', 'burlywood': '#deb887', 'cadetblue': '#5f9ea0', 'chartreuse': '#7fff00', 'chocolate': '#d2691e', 'coral': '#ff7f50', 'cornflowerblue': '#6495ed', 'cornsilk': '#fff8dc', 'crimson': '#dc143c', 'cyan': '#00ffff', 'darkblue': '#00008b', 'darkcyan': '#008b8b', 'darkgoldenrod': '#b8860b', 'darkgray': '#a9a9a9', 'darkgreen': '#006400', 'darkkhaki': '#bdb76b', 'darkmagenta': '#8b008b', 'darkolivegreen': '#556b2f', 'darkorange': '#ff8c00', 'darkorchid': '#9932cc', 'darkred': '#8b0000', 'darksalmon': '#e9967a', 'darkseagreen': '#8fbc8f', 'darkslateblue': '#483d8b', 'darkslategray': '#2f4f4f', 'darkturquoise': '#00ced1', 'darkviolet': '#9400d3', 'deeppink': '#ff1493', 'deepskyblue': '#00bfff', 'dimgray': '#696969', 'dodgerblue': '#1e90ff', 'firebrick': '#b22222', 'floralwhite': '#fffaf0', 'forestgreen': '#228b22', 'fuchsia': '#ff00ff', 'gainsboro': '#dcdcdc', 'ghostwhite': '#f8f8ff', 'gold': '#ffd700', 'goldenrod': '#daa520', 'gray': '#808080', 'green': '#008000', 'greenyellow': '#adff2f', 'honeydew': '#f0fff0', 'hotpink': '#ff69b4', "indianred ": '#cd5c5c', "indigo ": '#4b0082', 'ivory': '#fffff0', 'khaki': '#f0e68c', 'lavender': '#e6e6fa', 'lavenderblush': '#fff0f5', 'lawngreen': '#7cfc00', 'lemonchiffon': '#fffacd', 'lightblue': '#add8e6', 'lightcoral': '#f08080', 'lightcyan': '#e0ffff', 'lightgoldenrodyellow': '#fafad2', 'lightgrey': '#d3d3d3', 'lightgreen': '#90ee90', 'lightpink': '#ffb6c1', 'lightsalmon': '#ffa07a', 'lightseagreen': '#20b2aa', 'lightskyblue': '#87cefa', 'lightslategray': '#778899', 'lightsteelblue': '#b0c4de', 'lightyellow': '#ffffe0', 'lime': '#00ff00', 'limegreen': '#32cd32', 'linen': '#faf0e6', 'magenta': '#ff00ff', 'maroon': '#800000', 'mediumaquamarine': '#66cdaa', 'mediumblue': '#0000cd', 'mediumorchid': '#ba55d3', 'mediumpurple': '#9370d8', 'mediumseagreen': '#3cb371', 'mediumslateblue': '#7b68ee', 'mediumspringgreen': '#00fa9a', 'mediumturquoise': '#48d1cc', 'mediumvioletred': '#c71585', 'midnightblue': '#191970', 'mintcream': '#f5fffa', 'mistyrose': '#ffe4e1', 'moccasin': '#ffe4b5', 'navajowhite': '#ffdead', 'navy': '#000080', 'oldlace': '#fdf5e6', 'olive': '#808000', 'olivedrab': '#6b8e23', 'orange': '#ffa500', 'orangered': '#ff4500', 'orchid': '#da70d6', 'palegoldenrod': '#eee8aa', 'palegreen': '#98fb98', 'paleturquoise': '#afeeee', 'palevioletred': '#d87093', 'papayawhip': '#ffefd5', 'peachpuff': '#ffdab9', 'peru': '#cd853f', 'pink': '#ffc0cb', 'plum': '#dda0dd', 'powderblue': '#b0e0e6', 'purple': '#800080', 'red': '#ff0000', 'rosybrown': '#bc8f8f', 'royalblue': '#4169e1', 'saddlebrown': '#8b4513', 'salmon': '#fa8072', 'sandybrown': '#f4a460', 'seagreen': '#2e8b57', 'seashell': '#fff5ee', 'sienna': '#a0522d', 'silver': '#c0c0c0', 'skyblue': '#87ceeb', 'slateblue': '#6a5acd', 'slategray': '#708090', 'snow': '#fffafa', 'springgreen': '#00ff7f', 'steelblue': '#4682b4', 'tan': '#d2b48c', 'teal': '#008080', 'thistle': '#d8bfd8', 'tomato': '#ff6347', 'turquoise': '#40e0d0', 'violet': '#ee82ee', 'wheat': '#f5deb3', 'white': '#ffffff', 'whitesmoke': '#f5f5f5', 'yellow': '#ffff00', 'yellowgreen': '#9acd32' };
        var sent_hex,
        sent_hex = hex.toLowerCase().replace(' ', '');
        if (colors.hasOwnProperty(sent_hex))
        {
            hex = colors[sent_hex].substr(1);
            return calculateFull(hex, opacity);
        }
        else if (!sent_hex.match(/^#?([0-9A-Fa-f]){3}\s*$|^#?([0-9A-Fa-f]){6}\s*$/))
        {
            throw 'Invalid HEX value or color name';
        }
        else
        {
            hex = (sent_hex.charAt(0) === "#" ? sent_hex.substr(1) : sent_hex);
            if (hex.length === 6)
            {
                return Color.hexToRgbFull(hex, opacity);
            }
            else if (hex.length === 3)
            {
                return Color.hexToRgbPartial(hex, opacity);
            }
        }
    },
    hexToRgbFull: function (hex, opacity)
    {
        var r = parseInt(hex.substring(0, 2), 16);
        var g = parseInt(hex.substring(2, 4), 16);
        var b = parseInt(hex.substring(4, 6), 16);
        var t = 'rgba(' + r + ',' + g + ',' + b + ',' + opacity / 100 + ')';
        return t;
    },
    hexToRgbPartial: function (hex, opacity)
    {
        var r = parseInt(hex.substring(0, 1) + hex.substring(0, 1), 16);
        var g = parseInt(hex.substring(1, 2) + hex.substring(1, 2), 16);
        var b = parseInt(hex.substring(2, 3) + hex.substring(2, 3), 16);
        var t = 'rgba(' + r + ',' + g + ',' + b + ',' + opacity / 100 + ')';
        return t;
    }
};
;
const customSelect = function (element, overrides) {

    const defaults = {
        inputSelector: '#custom-select-input',
        listSelector: 'ul',
        optionSelector: 'li',
        statusSelector: '[aria-live="polite"]'
    };

    const options = Object.assign({},
        defaults,
        overrides
    );

    const csSelector = document.querySelector(element) // the input, svg and ul as a group
    const csInput = csSelector.querySelector(options.inputSelector)
    const csList = csSelector.querySelector(options.listSelector)
    const csOptions = csList.querySelectorAll(options.optionSelector)
    // const csIcons = csSelector.querySelectorAll('svg')
    const csStatus = document.querySelector(options.statusSelector)
    const aOptions = Array.from(csOptions)

    // when JS is loaded, set up our starting point
    // if JS fails to load, the custom select remains a plain text input
    // create and set start point for the state tracker
    let csState = "initial"
    // inform assistive tech (screen readers) of the names & roles of the elements in our group
    csSelector.setAttribute('role', 'combobox')
    csSelector.setAttribute('aria-haspopup', 'listbox')
    csSelector.setAttribute('aria-owns', 'custom-select-list') // container owns the list...
    csInput.setAttribute('aria-autocomplete', 'both')
    csInput.setAttribute('aria-controls', 'custom-select-list') // ...but the input controls it
    csList.setAttribute('role', 'listbox')
    csOptions.forEach(function (option) {
        option.setAttribute('role', 'option')
        option.setAttribute('tabindex', "-1")  // make li elements keyboard focusable by script only
    });

    var currVal = $("#SiteId").val();
    var currElem = $(".custom-select-options li[data-value=" + currVal + "]");
    makeChoice(currElem[0],true);


    // EVENTS
    // /////////////////////////////////
    csSelector.addEventListener('click', function (e) {
        const currentFocus = findFocus()
        
        switch (csState) {
            case 'initial': // if state = initial, toggleOpen and set state to opened
                toggleList('Open')
                setState('opened')
                break
            case 'opened':
                // if state = opened and focus on input, toggleShut and set state to initial
                if (currentFocus === csInput || e.srcElement === csInput || e.srcElement.parentElement.className === "custom-select-icons" || e.srcElement.className === "custom-select-icons") {
                    toggleList('Shut')
                    setState('initial')
                } else if (currentFocus.tagName === 'LI') {
                    // if state = opened and focus on list, makeChoice, toggleShut and set state to closed
                    makeChoice(currentFocus, false)
                    toggleList('Shut')
                    setState('closed')
                }
                break
            case 'filtered':
                // if state = filtered and focus on list, makeChoice and set state to closed
                if (currentFocus.tagName === 'LI') {
                    makeChoice(currentFocus, false)
                    toggleList('Shut')
                    setState('closed')
                } // if state = filtered and focus on input, do nothing (wait for next user input)

                break
            case 'closed': // if state = closed, toggleOpen and set state to filtered? or opened?
                toggleList('Open')
                setState('filtered')
                break
        }
    })

    csSelector.addEventListener('keyup', function (e) {
        doKeyAction(e.key)
    })

    document.addEventListener('click', function (e) {
        if (!e.target.closest('#myCustomSelect')) {
            // click outside of the custom group
            toggleList('Shut')
            setState('initial')
        }
    })

    // FUNCTIONS 
    // /////////////////////////////////

    function toggleList(whichWay) {
        if (whichWay === 'Open') {
            csList.classList.remove('hidden-all')
            csSelector.setAttribute('aria-expanded', 'true')
        } else { // === 'Shut'
            csList.classList.add('hidden-all')
            csSelector.setAttribute('aria-expanded', 'false')
        }
    }

    function findFocus() {
        const focusPoint = document.activeElement
        return focusPoint
    }

    function moveFocus(fromHere, toThere) {
        // grab the currently showing options, which might have been filtered
        const aCurrentOptions = aOptions.filter(function (option) {
            if (option.style.display === '') {
                return true
            }
        })
        // don't move if all options have been filtered out
        if (aCurrentOptions.length === 0) {
            return
        }
        if (toThere === 'input') {
            csInput.focus()
        }
        // possible start points
        switch (fromHere) {
            case csInput:
                if (toThere === 'forward') {
                    aCurrentOptions[0].focus()
                } else if (toThere === 'back') {
                    aCurrentOptions[aCurrentOptions.length - 1].focus()
                }
                break
            case csOptions[0]:
                if (toThere === 'forward') {
                    aCurrentOptions[1].focus()
                } else if (toThere === 'back') {
                    csInput.focus()
                }
                break
            case csOptions[csOptions.length - 1]:
                if (toThere === 'forward') {
                    aCurrentOptions[0].focus()
                } else if (toThere === 'back') {
                    aCurrentOptions[aCurrentOptions.length - 2].focus()
                }
                break
            default: // middle list or filtered items 
                const currentItem = findFocus()
                const whichOne = aCurrentOptions.indexOf(currentItem)
                if (toThere === 'forward') {
                    const nextOne = aCurrentOptions[whichOne + 1]
                    nextOne.focus()
                } else if (toThere === 'back' && whichOne > 0) {
                    const previousOne = aCurrentOptions[whichOne - 1]
                    previousOne.focus()
                } else { // if whichOne = 0
                    csInput.focus()
                }
                break
        }
    }

    //function doFilter() {
    //    const terms = csInput.value
    //    const aFilteredOptions = aOptions.filter(function (option) {
    //        if (option.innerText.toUpperCase().startsWith(terms.toUpperCase())) {
    //            return true
    //        }
    //    })
    //    csOptions.forEach(option => option.style.display = "none")
    //    aFilteredOptions.forEach(function (option) {
    //        option.style.display = ""
    //    })
    //    setState('filtered')
    //    updateStatus(aFilteredOptions.length)
    //}

    function updateStatus(howMany) {
        csStatus.textContent = howMany + " options available."
    }

    function makeChoice(whichOption, isStart) {
        csInput.innerText = whichOption.textContent;
        moveFocus(document.activeElement, '#custom-select-input');
        csOptions.forEach(function (option) {
            option.removeAttribute('class', 'selected')
           
        });
        whichOption.setAttribute('class', 'selected');


    }

    function setState(newState) {
        switch (newState) {
            case 'initial':
                csState = 'initial'
                break
            case 'opened':
                csState = 'opened'
                break
            case 'filtered':
                csState = 'filtered'
                break
            case 'closed':
                csState = 'closed'
        }
        // console.log({csState})
    }

    function doKeyAction(whichKey) {
        const currentFocus = findFocus()

        switch (whichKey) {
            case 'Enter':
                if (csState === 'initial') {
                    // if state = initial, toggleOpen and set state to opened
                    toggleList('Open')
                    setState('opened')
                } else if (csState === 'opened' && currentFocus.tagName === 'LI') {
                    // if state = opened and focus on list, makeChoice and set state to closed
                    makeChoice(currentFocus, false)
                    toggleList('Shut')
                    setState('closed')
                } else if (csState === 'opened' && currentFocus === csInput) {
                    // if state = opened and focus on input, close it
                    toggleList('Shut')
                    setState('closed')
                } else if (csState === 'filtered' && currentFocus.tagName === 'LI') {
                    // if state = filtered and focus on list, makeChoice and set state to closed
                    makeChoice(currentFocus, false)
                    toggleList('Shut')
                    setState('closed')
                } else if (csState === 'filtered' && currentFocus === csInput) {
                    // if state = filtered and focus on input, set state to opened
                    toggleList('Open')
                    setState('opened')
                } else { // i.e. csState is closed, or csState is opened/filtered but other focus point?
                    // if state = closed, set state to filtered? i.e. open but keep existing input? 
                    toggleList('Open')
                    setState('filtered')
                }
                break

            case 'Escape':
                // if state = initial, do nothing
                // if state = opened or filtered, set state to initial
                // if state = closed, do nothing
                if (csState === 'opened' || csState === 'filtered') {
                    toggleList('Shut')
                    setState('initial')
                }
                break

            case 'ArrowDown':
                if (csState === 'initial' || csState === 'closed') {
                    // if state = initial or closed, set state to opened and moveFocus to first
                    toggleList('Open')
                    moveFocus(csInput, 'forward')
                    setState('opened')
                } else {
                    // if state = opened and focus on input, moveFocus to first
                    // if state = opened and focus on list, moveFocus to next/first
                    // if state = filtered and focus on input, moveFocus to first
                    // if state = filtered and focus on list, moveFocus to next/first
                    toggleList('Open')
                    moveFocus(currentFocus, 'forward')
                }
                break
            case 'ArrowUp':
                if (csState === 'initial' || csState === 'closed') {
                    // if state = initial, set state to opened and moveFocus to last
                    // if state = closed, set state to opened and moveFocus to last
                    toggleList('Open')
                    moveFocus(csInput, 'back')
                    setState('opened')
                } else {
                    // if state = opened and focus on input, moveFocus to last
                    // if state = opened and focus on list, moveFocus to prev/last
                    // if state = filtered and focus on input, moveFocus to last
                    // if state = filtered and focus on list, moveFocus to prev/last
                    moveFocus(currentFocus, 'back')
                }
                break
            default:
                if (csState === 'initial') {
                    // if state = initial, toggle open, doFilter and set state to filtered
                    toggleList('Open')
                    //doFilter()
                    //setState('filtered')
                } else if (csState === 'opened') {
                    // if state = opened, doFilter and set state to filtered
                   // doFilter()
                   // setState('filtered')
                } else if (csState === 'closed') {
                    // if state = closed, doFilter and set state to filtered
                    //doFilter()
                    //setState('filtered')
                } else { // already filtered
                    //doFilter()
                }
                break
        }
    }

};
var DeskMobile = {
    MaxProducts: 12,
    Counter: 0,
    Init: function () {
        DeskMobile.Events();
        DeskMobile.Settings();
    },
    Events: function () {
        $(".check-table").on("click", function () {
            if (this.checked && DeskMobile.Counter == DeskMobile.MaxProducts) {
                event.preventDefault();
                $(this).prop('checked', false);
                PopUps.ShowPopUp(2);
                return;
            }
            if (this.checked && DeskMobile.Counter < DeskMobile.MaxProducts) {
                DeskMobile.Counter++
            }
            else if (DeskMobile.Counter > 0) {
                DeskMobile.Counter--;
            }
            if (DeskMobile.MaxProducts >= DeskMobile.Counter) {
                DeskMobile.CheckProduct(this, "#gallarycheck");
            }
            DeskMobile.RefreshCounter();
        });

        $(".check-gallary, .checked-gallary").on("click", function () {
            
            $(this).css('display','none');
            var productId = $(this).attr("id");
            if($(this).hasClass('check-gallary')){
                $(`#${productId}.checked-gallary`).css('display','block');
            }else{
                $(`#${productId}.check-gallary`).css('display','block');
            } 
            
        });

        $(".panel-control-1 > a").on("click", function () {
            DeskMobile.SelectView(this);
        });

        $("div.tab-panel-content > div.mob-controller-view div").on(function () {
            DeskMobile.MobSelectView(this);
        });

        $(".mob-btn-search-product").on("click", function () {
            PanelMenuMobile.GetProducts();
        });
    },

    Settings: function () {

    },

    CheckProduct: function (element, prefId) {
        var isChecked = element.checked
        var productId = $(element).attr("id");
        var gallaryItem = $("#GallaryItem" + productId);
        var target = $(prefId + productId);
    },

    SelectView: function (element) {
        var selected = parseInt($(element).attr("view-type"), 10);
        if (selected == 3 && Box.Count() == 0) {
            PopUps.ShowPopUp(1);
            return;
        }
        var viewType = getUrlParameter('ViewType');
        if (viewType == "") {
            var newurl = window.location.href + '?ViewType=' + selected;
            window.history.pushState({ path: newurl }, '', newurl);
        }
        else {
            var pos = window.location.href.indexOf("ViewType=") + "ViewType=".length;
            var newurl = window.location.href.replaceAt(pos, "" + selected + "");
            window.history.pushState({ path: newurl }, '', newurl);
        }
        if (selected == 1) {
            $('.cnt').show();
            $(".tv-container").css("display", "flex");
            $(".gv-container").css("display", "none");
            $(".gdv-container").css("display", "none");
            $("#btnViewTable").attr("style", "background-image: url(assets/img/Icons/16.png)");
            $("#btnViewTable").removeClass("selected");
            $("#btnViewGrid").attr("style", "background-image: url(assets/img/Icons/13.png)");
            $("#btnViewGrid").removeClass("selected");
            $("#btnViewGrapth").attr("style", "background-image: url(assets/img/Icons/11.png)");
            $("#btnViewGrapth").addClass("selected");
            $(".pn-cal-container").css("display", "flex");
            $(".pn-cmp-container").css("display", "none");
        }

        else if (selected == 2) {
            $('.cnt').show();
            $(".gv-container").css("display", "flex");
            $(".tv-container").css("display", "none");
            $(".gdv-container").css("display", "none");
            $("#btnViewTable").attr("style", "background-image: url(assets/img/Icons/15.png)");
            $("#btnViewTable").removeClass("selected");
            $("#btnViewGrid").attr("style", "background-image: url(assets/img/Icons/14.png)");
            $("#btnViewGrid").removeClass("selected");
            $("#btnViewGrapth").attr("style", "background-image: url(assets/img/Icons/11.png)");
            $("#btnViewGrapth").addClass("selected");
            $(".pn-cal-container").css("display", "flex");
            $(".pn-cmp-container").css("display", "none");
        }
        else if (selected == 3) {
            $('.cnt').hide();
            $(".gv-container").css("display", "none");
            $(".tv-container").css("display", "none");
            $(".gdv-container").css("display", "flex");
            $("#btnViewTable").attr("style", "background-image: url(assets/img/Icons/15.png)");
            $("#btnViewTable").removeClass("selected");
            $("#btnViewGrid").attr("style", "background-image: url(assets/img/Icons/13.png)");
            $("#btnViewGrid").removeClass("selected");
            $("#btnViewGrapth").attr("style", "background-image: url(assets/img/Icons/12.png)");
            $("#btnViewGrapth").addClass("selected");
            $(".pn-cal-container").css("display", "none");
            $(".pn-cmp-container").css("display", "flex");
            //update display
            productsGraph.display2();

            var graphType = panelCompare.getComparationType() == 1 ? 'graph' : 'diagram';

            GraphView.Init(graphType);
            GraphView.SetGraph();
        }
    },

    GetSelectedView: function () {
        var selected = parseInt($('.panel-control .selected').attr('view-type'), 10);
        return selected;
    },

    MobSelectView: function () {
        var selected = $(element).attr("view-type");
        if (selected == 1) {
            $(".table-view").css("display", "flex");
            $(".gallary-view").css("display", "none");
        }

        if (selected == 2) {
            $(".gallary-view").css("display", "flex");
            $(".table-view").css("display", "none");
        }
    },

    ClearAllCounter: function () {
        DeskMobile.Counter = 0;
        $("#CounterProducts").html(DeskMobile.Counter + "/" + DeskMobile.MaxProducts);
        $("#PanelMenuCount").html(DeskMobile.Counter);

        if (DeskMobile.Counter == 0) {
            $("#TabMobCounter").css("display", "none");
            $("#TabMobCounter").html(DeskMobile.Counter);
            $("#MobCounter").html(DeskMobile.Counter);
        }
        else {
            $("#TabMobCounter").css("display", "flex");
            $("#TabMobCounter").html(DeskMobile.Counter);
            $("#MobCounter").html(DeskMobile.Counter);
        }
    },

    ClearCounter: function () {
        DeskMobile.Counter--;
        $("#CounterProducts").html(DeskMobile.Counter + "/" + DeskMobile.MaxProducts);
        $("#PanelMenuCount").html(DeskMobile.Counter);

        if (DeskMobile.Counter == 0) {
            $("#TabMobCounter").css("display", "none");
            $("#TabMobCounter").html(DeskMobile.Counter);
            $("#MobCounter").html(DeskMobile.Counter);
        }
        else {
            $("#TabMobCounter").css("display", "flex");
            $("#TabMobCounter").html(DeskMobile.Counter);
            $("#MobCounter").html(DeskMobile.Counter);
        }
    },

    RefreshCounter: function () {
        $("#CounterProducts").html(DeskMobile.Counter + "/" + DeskMobile.MaxProducts);
        $("#PanelMenuCount").html(DeskMobile.Counter);

        if (DeskMobile.Counter == 0) {
            $("#TabMobCounter").css("display", "none");
            $("#TabMobCounter").html(DeskMobile.Counter);
            $("#MobCounter").html(DeskMobile.Counter);
        }
        else {
            $("#TabMobCounter").css("display", "flex");
            $("#TabMobCounter").html(DeskMobile.Counter);
            $("#MobCounter").html(DeskMobile.Counter);
        }
    },

    CompareProducts: function () {
        TableView.RemoveNotChecked();
        GalleryView.RemoveNotChecked();
    }
}

var Box = {
    items: [],
    MaxItems: 12,
    RepositoryName: "Box",
    Init: function () {
        Box.Settings();
    },
    Events: function () {
    },
    Settings: function () {
        if (!Box.IsExistRepository()) {
            Box.InitRepository();
        }
        Box.LoadElemetns();
    },
    LoadElemetns: function () {
        var repo = Box.GetRepository();
        Box.items = JSON.parse(repo);
        $.each(Box.items, function (key, value) {
            PanelMenu.AddItem({ id: value.Product.ID, name: value.Product.ProductName, image: value.Product.Url });
            PanelMenuMobile.AddItem({ id: value.Product.ID, name: value.Product.ProductName, image: value.Product.Url });
            TableView.CheckElement(value.Product.ID);
            GalleryView.CheckElement(value.Product.ID);
        });
        DeskMobile.Counter = Box.items.length;
        DeskMobile.RefreshCounter();
    },
    SetItem: function (obj) {
        var IsExsist = Box.FindItem(obj.Id) != null;
        if (!IsExsist && (Box.Count() < Box.MaxItems)) {
            var item = { Product: { ID: obj.Id, ProductName: obj.name, Url: obj.url } };
            Box.items.push(item);
            Box.UpdateRepository();
        }
    },

    GetItem: function (id) {
        var item;
        var itemIndex = Box.FindItem(id);
        if (itemIndex != null)
            item = Box.items[itemIndex];
        return item;
    },

    FindItem: function (id) {
        var objIndex;
        var items = Box.items;
        $.each(items, function (index, item) {
            if (item.Product.ID == id) {
                objIndex = index;
                return false;
            }
        });
        return objIndex;
    },

    GetItems: function () {
        return Box.items;
    },

    ClearItem: function (id) {
        var itemIndex = Box.FindItem(id);
        if (itemIndex != null) {
            Box.items.splice(itemIndex, 1);
        }
        Box.UpdateRepository();
    },

    ClearItems: function () {
        Box.items = [];
        Box.UpdateRepository();
    },

    InitRepository: function () {
        localStorage.setItem(Box.RepositoryName, JSON.stringify([]));
    },

    IsExistRepository: function () {
        return Box.GetRepository() != null;
    },

    GetRepository: function () {
        return localStorage.getItem(Box.RepositoryName);
    },

    Count: function () {
        return Box.items.length;
    },

    UpdateRepository: function () {
        localStorage.setItem(Box.RepositoryName, JSON.stringify(Box.items));
    }
};

$(document).ready(function () {
    $('#init-app').on('click',function(){
        console.log('app initialized')
        customSelect('#myCustomSelect', { statusSelector: '#custom-select-status' });
        PanelMenu.Init();
        DeskMobile.Init();
        PanelCalculate.Init();
        PanelControl.Init();
        GalleryView.Init();
        TableView.Init();
        PopUps.Init();
    
        TableViewQuery.Init();
    
        function sortTable(f, n) {
            var rows = $('#ProductTable tbody  tr').get();
    
            rows.sort(function (a, b) {
    
                var A = getVal(a);
                var B = getVal(b);
    
                if (A < B) {
                    return -1 * f;
                }
                if (A > B) {
                    return 1 * f;
                }
                return 0;
            });
    
            function getVal(elm) {
                var v = $(elm).children('td').eq(n).text().toUpperCase();
                if ($.isNumeric(v)) {
                    v = parseInt(v, 10);
                }
                return v;
            }
    
            $.each(rows, function (index, row) {
                $('#ProductTable').children('tbody').append(row);
            });
        }
        var f_sl = 1;
        var f_nm = 1;
    
        $("#sl1, #sl2, #sl3, #sl4, #sl5, #sl6, #sl7, #sl8, #sl9, #sl10,#sl11, #sl12, #sl13, #sl14").on("click", function () {
            f_sl *= -1;
            var n = $(this).prevAll().length;
            sortTable(f_sl, n);
        });
    });    
});


$(document).scroll(function () {
    PanelMenu.CheckOfSet();
});
$(window).resize(function () {
    PanelMenuMobile.Init();
    console.log('resize____dddd_____')
    PanelMenuMobile.SetAllDefault();
});

var PanelMenuMobile = {

    Init: function () {
        PanelMenuMobile.Settings();
        PanelMenuMobile.SetAttributes();
        PanelMenuMobile.Events();
    },

    Events: function () {

        $(".tab-item").on("click", function () {
            var idvis = ".tab-item-" + $(this).attr("panel");

            if ($(idvis).is(':visible')) {
                $(".menu-mobile-background").css("display", "none");
                $(idvis).slideToggle('slow', function () {
                    if (!$(this).is(':visible')) {
                        $(".logo-panel-mobile").hide();
                    }
                });
                $(this).removeClass("tab-item-active");
                $(this).addClass("tab-item");
            }
            else {
                $(".menu-mobile-background").css("display", "block");
                $(".logo-panel-mobile").show();
                $(this).removeClass("tab-item");
                $(this).addClass("tab-item-active");

                $(".tab-selector").not(this).removeClass("tab-item-active").addClass("tab-item");
                var id = ".tab-item-" + $(this).attr("panel");
                if ($(id).css('display') == "none") {

                    $(".menu-mobile-panel .tab-panel-item").not(this).slideUp(300).delay(500);
                    $(idvis).slideToggle('slow');
                }
            }
        });

        $(".menu-mobile-background, .mob-button-close, #btnMobViewGrid, #btnMobViewTable, #btnMobGraphView").on("click", function () {
            if (this.id == 'btnMobGraphView') {
                $('.tab-selector[panel=4]').click();
                PanelMenu.EqualProducts();
            }
            else {
                $(".tab-item-active").click();
            }
        });

        $("div.tab-panel-content > div.mob-controller-view div").on("click", function () {
            var count = Box.Count();
            var id = $(this).attr("view-type");

            if (id == 3 && count == 0) {
                PopUps.ShowPopUp(1); return;
            }
            $("div.tab-panel-content > div.mob-controller-view a").removeClass("mob-view-active");
            $(this).addClass("mob-view-active");

            PanelMenuMobile.MobSelectView(this);
        });

        $(".menu-mobile-panel .tab-item-1 .tab-panel-content .sharing .share").on("click", function () {
            Header.Share(event);
        })

        $(".mob-filter-button:not(.graph-filter)").on("click", function () {
            PanelMenuMobile.GetProducts();
        })

        $("#MobComparisonDateType").on("change", function () {
            PanelMenuMobile.ShowOrHideColumns(this);
        });

        $("#MobPrecent").on("click", function () {
            PanelMenuMobile.ShowOrHideColumns(this);
        });
        $(document).on("click", ".mob-btn-clear-product", function (e) {
            DeskMobile.Counter--;
            var itemId = $(this).attr("item-id");
            $("#tablecheck" + itemId).prop('checked', false);
            $("#gallarycheck" + itemId).prop('checked', false);
            $("#GallaryItem" + itemId).removeClass("active-gallary");
            $("#MobProduct" + itemId).remove();
            $("#product" + itemId).remove();
            DeskMobile.RefreshCounter();
            Box.ClearItem(itemId);
        });

        $("#MobComparisonDate").on("click", function () {
            event.preventDefault();
        });


        $('[data-disable-touch-keyboard]').attr('readonly', 'readonly');
    },

    Settings: function () {
        $('.menu-mobile-panel .tab-panel-item').hide();
        $("div.tab-panel-content > div.mob-controller-view > a:nth-child(2)").addClass("mob-view-active");
        var cuurSiteId = $("#SiteId").val();
      
        var searchPerPage = Global.Items.filter(a => a.siteId == cuurSiteId);

        $("#MobProductSearch").autocomplete({
            source: searchPerPage,
            select: function (event, ui) {
                var item = searchPerPage.find(function (p) {
                    return p.label == ui.item.label;
                });

                window.location.href = '/Prices?ProductId=' + item.itemId + '&ProductName=' + item.label + '&SiteId=' + cuurSiteId;
            },
            appendTo: $("#MobProductSearchResult")
        });
        console.log('mobile init')
        $("#MobProductSearch").focus(function () {
            $(".menu-button").hide();
        });

        $("#MobProductSearch").blur(function () {
            $(".menu-button").show();
        });

        $("#MobComparisonDate").datepicker({
            dateFormat: "dd.mm.yy",
            isRTL: true,
            maxDate: 0,
            beforeShow: function (input, inst) {
                //inst.dpDiv.css({ marginLeft: input.offsetWidth - 172 + 'px' });
            }
        });

        if (Modernizr.touch) {
            $('[data-disable-touch-keyboard]').attr('readonly', 'readonly');
        }
    },

    CollapseOpenedMenu: function () {
        var idvis = ".tab-item-" + $(".tab-item-active").attr("panel");
        $(idvis).slideToggle(function () {
            $(".tab-selector").removeClass("tab-item-active").addClass("tab-item");
            $(".logo-panel-mobile").css("display", "none");
            $(".menu-mobile-background").css("display", "none");
        });
    },

    MobSelectView: function (element, typeId) {
        var selected;

        if (typeId && !isNaN(typeId))
            selected = typeId + '';
        else
            selected = $(element).attr("view-type");

        switch (selected) {
            case "1":
                $(".tv-container").css("display", "flex");
                $(".gv-container").css("display", "none");
                $(".gdv-container").css("display", "none");
                $(".table-view").css("display", "flex");
                $(".gallary-view").css("display", "none");
                $('.menu-mobile-panel .tab-item-4 .tab-filter-item-1').show();
                $('.menu-mobile-panel .tab-item-4 .tab-filter-item-2').hide();
                break;
            case "2":
                $(".gv-container").css("display", "flex");
                $(".tv-container").css("display", "none");
                $(".gdv-container").css("display", "none");
                $(".gallary-view").css("display", "flex");
                $(".table-view").css("display", "none");
                $('.menu-mobile-panel .tab-item-4 .tab-filter-item-1').show();
                $('.menu-mobile-panel .tab-item-4 .tab-filter-item-2').hide();
                break;
            case "3":
                $('.cnt').hide();
                $(".gv-container").css("display", "none");
                $(".tv-container").css("display", "none");
                $(".gdv-container").css("display", "flex");
                $("#btnViewTable").attr("style", "background-image: url(assets/img/Icons/15.png)");
                $("#btnViewTable").removeClass("selected");
                $("#btnViewGrid").attr("style", "background-image: url(assets/img/Icons/13.png)");
                $("#btnViewGrid").removeClass("selected");
                $("#btnViewGrapth").attr("style", "background-image: url(assets/img/Icons/12.png)");
                $("#btnViewGrapth").addClass("selected");
                $(".pn-cal-container").css("display", "none");
                $(".pn-cmp-container").css("display", "flex");
                $('.menu-mobile-panel .tab-item-4 .tab-filter-item-1').hide();
                $('.menu-mobile-panel .tab-item-4 .tab-filter-item-2').show();

                //update display
                //productsGraph.display2();
                break;
            default:
                break;
        }
    },

    GetSelectedView: function () {
        var selected = parseInt($('.menu-mobile-panel .mob-view-active').attr('view-type'), 10);
        return selected;
    },

    AddItem: function (item) {

        var appendMobItem = '<div class="mob-product-item" id="MobProduct' + item.id + '">' +
            '<div class="mob-product-item-clear">' +
            '<a title="הסר" class="mob-xbtn-clear-product" item-id="' + item.id + '">' +
            'הסר' +
            '</a>' +
            '</div>' +
            '<div class="mob-product-item-name">' +
            '<p>' + item.name + '</p>' +
            '</div>' +
            '<div class="mob-product-item-img">' +
            '<img src="' + item.image + '" alt="' + item.name +'" />' +
            '</div>' +
            '</div>'

        $(".mob-product-content").append(appendMobItem);
    },

    GetProducts: function () {

        var date = $("#MobComparisonDate").val();
        var dateType = $("#MobComparisonDateType").val();
        var productType = $("#MobProductType").val();
        var productId = $("#MobProductSearchHidden").val();
        var productName = $("#MobProductSearch").val();
        var precentChangeDaily = $("#MobPrecent").is(":checked")
        var viewType = PanelMenuMobile.GetSelectedView();

        var queryString = "/Prices" +
            "?ProductName=" + (productName != "undefined" ? productName : "") +
            "&ProductId=" + productId +
            "&ProductType=" + productType +
            "&ViewType=" + viewType +
            "&PercentChangeDaily=" + precentChangeDaily;

        if (dateType != "") {
            queryString += "&ComparisonDateType=" + dateType;
        }
        if (date != "") {
            queryString += "&ComparisonDate=" + date;
        }

        window.location = queryString;
    },

    ShowOrHideColumns: function (event) {

        var mobPrecent = $("#MobPrecent")[0];
        var statePrecentChange = mobPrecent.checked;
        var index = parseInt($("#MobComparisonDateType").val());
        var width = screen.width;
        var isHiddenGallary = $(".gv-container").is(':hidden');

        var orientation = window.matchMedia("(orientation: landscape)").matches;

        if (orientation) {
            if (index > 0 && statePrecentChange) {
                GalleryView.ShowDailyChange(index);
                GalleryView.ShowPrecentChange();
                TableView.ShowDailyChange(index);
                TableView.ShowPrecentChange();
            }
            else if (index == 0 && statePrecentChange) {
                GalleryView.HideDailyChange();
                GalleryView.ShowPrecentChange();
                TableView.HideDailyChange();
                TableView.ShowPrecentChange();
            }
            else if (index > 0 && !statePrecentChange) {
                GalleryView.ShowDailyChange(index);
                GalleryView.HidePrecentChange();
                TableView.ShowDailyChange(index);
                TableView.HidePrecentChange();
            }
            else if (index == 0 && !statePrecentChange) {
                GalleryView.HideDailyChange();
                GalleryView.HidePrecentChange();
                TableView.HideDailyChange();
                TableView.HidePrecentChange();
            }
        }
        else if (!orientation) {
            if (event.id == "MobComparisonDateType") {
                if (index == 0) {
                    TableView.HideDailyChange();
                    GalleryView.HideDailyChange();
                    return;
                }
                else {
                    GalleryView.HideDailyChange();
                    GalleryView.ShowDailyChange(index);
                    TableView.HideDailyChange();
                    if (isHiddenGallary) {
                        PopUps.ShowPopUp(6);
                    }
                }
            }
            else if (event.id == "MobPrecent") {
                if (!statePrecentChange) {
                    TableView.HidePrecentChange();
                    GalleryView.HidePrecentChange();
                    return;
                }
                else {
                    GalleryView.ShowPrecentChange();
                    if (isHiddenGallary) {
                        TableView.HidePrecentChange();
                        PopUps.ShowPopUp(6);
                    }
                }
            }
        }
        TableView.WidthColumns(index, statePrecentChange);
    },

    SetAllDefault: function () {

        var mobPrecent = $("#MobPrecent")[0];
        var statePrecentChange = mobPrecent.checked;
        var index = parseInt($("#MobComparisonDateType").val());
        var width = screen.width;

        var orientation = window.matchMedia("(orientation: landscape)").matches;

        GalleryView.HideDailyChange();
        GalleryView.HidePrecentChange();
        TableView.HideDailyChange();
        TableView.HidePrecentChange();

        if (orientation) {
            if (index > 0 && statePrecentChange) {
                GalleryView.ShowDailyChange(index);
                GalleryView.ShowPrecentChange();
                TableView.ShowDailyChange(index);
                TableView.ShowPrecentChange();
            }
            else if (index == 0 && statePrecentChange) {
                GalleryView.HideDailyChange();
                GalleryView.ShowPrecentChange();
                TableView.HideDailyChange();
                TableView.ShowPrecentChange();
            }
            else if (index > 0 && !statePrecentChange) {
                GalleryView.ShowDailyChange(index);
                GalleryView.HidePrecentChange();
                TableView.ShowDailyChange(index);
                TableView.HidePrecentChange();
            }
        }
        else if (!orientation) {

            TableView.HideDailyChange();
            TableView.HidePrecentChange();

            if (index > 0) {
                GalleryView.ShowDailyChange(index);
            }
            else {
                GalleryView.HideDailyChange();
            }
            if (statePrecentChange) {
                GalleryView.ShowPrecentChange();
            }
            else {
                GalleryView.HidePrecentChange();
            }
        }
        TableView.WidthColumns(index, statePrecentChange);
    },

    SetAttributes: function () {
        $("#MobComparisonDate").attr("data-disable-touch-keyboard", '');
    }
};


var PanelMenu = {
    SelectContent: $(".panel-menu-items"),
    Count: 0,
    Init: function () {
        PanelMenu.Events();
        PanelMenu.CheckOfSet();
    },

    Events: function () {
        $("#BtnZoom").on("click", function () {
            PanelMenu.BtnCollapse();
        });
        $(".panel-menu-content-item, .mob-btn-clear-product").on("click", ".menu-content-clear, .mob-btn-clear-product", function () {
            PanelMenu.ClearItem(this);

        });
        $("#BtnEqual, .mob-btn-comparison").on("click", function () {
            if ($(".check-table:checked").length > 0) {
                PanelMenu.EqualProducts();
            }
        });
        $("#inputSearch").on("click", function () {
            $(".form-calculate").submit();
        });

        $(document).on("click", ".menu-content-clear", function (e) {
            DeskMobile.Counter--;
            DeskMobile.RefreshCounter();
            var itemId = $(this).attr("item-id");
            $("#tablecheck" + itemId).prop('checked', false);
            $("#gallarycheck" + itemId).prop('checked', false);
            $("#GallaryItem" + itemId).removeClass("active-gallary");
            $("#product" + itemId).remove();
            $("#MobProduct" + itemId).remove();
            $("#GallaryItem" + itemId).find(".check-gallary").css({ "display": "block" });
            $("#GallaryItem" + itemId).find(".checked-gallary").css({ "display": "none" });
            Box.ClearItem(itemId);
        });
    },

    AddItem: function (item) {
        var appendItem = "<div class='panel-menu-content-item' id='product" + item.id + "' item-id='" + item.id + "'>" +
                "<div class='menu-content-clear' id='ClearItem' item-id='" + item.id + "'>" +
                    "<p>הסר</p>" +
                "</div>" +
                "<div class='menu-content-description'>" +
                    "<span dir=\"RTL\">" + item.name + "</span>" +
                "</div>" +
                "<div class='menu-content-img'>" +
            "<img src='" + item.image + "' alt='" + item.name+"' />" +
                "</div>" +
            "</div>";
        $(".panel-menu-items").append(appendItem);
    },

    ClearItem: function (element) {
        var itemId = $(element).attr("item-id");
        $("#tablecheck" + itemId).prop('checked', false);
        $("#gallarycheck" + itemId).prop('checked', false);
        $("#GallaryItem" + itemId).removeClass("active-gallary");
        $("#MobProduct" + itemId).remove();
        $("#product" + itemId).remove();
        DeskMobile.RefreshCounter();
        Box.ClearItem(itemId);
    },

    ClearAllItems: function () {
        $(".panel-menu-items").each(function () {
            $(this).children("*").remove();
        });
        $(".mob-product-content").each(function () {
            $(this).children("*").remove();
        });
        var array = Box.GetItems();
        $.each(array, function (i, val) {
            var Id = array[i].Product.ID
            GalleryView.UnCheckElement(Id);
            $("#tablecheck" + Id).prop('checked', false);
        });
        DeskMobile.ClearAllCounter();
        Box.ClearItems();
    },

    BtnCollapse: function () {
        $("#MenuCollapseContainer").slideToggle(function () {
            if ($(this).is(':visible')) {
                $("#BtnZoom p").html('הקטן תצוגה');
            }
            else {
                $("#BtnZoom p").html('הגדל תצוגה');
            }
        });
    },

    BtnEdit: function () {
        DeskMobile.SelectView($('#btnViewTable')[0]);
        $(".table-pagination").jPages(1);
        $('html, body').animate({
            scrollTop: $("#ProductTable").offset().top
        }, 2000);
    },

    EqualProducts: function () {
        if (Box.Count() > 0) {
            var graphType = panelCompare.getComparationType() == 1 ? 'graph' : 'diagram';
            GraphView.Init(graphType);
            GraphView.SetGraph();
        }
        else {
            DeskMobile.SelectView($('#btnViewTable'));
        }
    },

    CheckOfSet: function () {
        var a = $(document).scrollTop() + window.innerHeight;
        var b = $('footer').offset().top;
        if (a < b) {
            $('.panel-menu').css('bottom', '0px');
        } else {
            $('.panel-menu').css('bottom', (0 + (a - b)) + 'px');
        }
    }
};
(function ($) {
    $.fn.panelComparation = function (options) {
        return new panelComparation(this, options);
    }

    function panelComparation(caller, options) {
        var self = this;
        var $caller = caller;
        var $btnCompare;
        var $mobBtnCompare;
        var $priceDisplay;
        var $comparasionPeriod;
        var $comparationType;
        var $average;

        var init = function () {
            $priceDisplay = $caller.find('#PriceDisplay');
            $comparationType = $caller.find('#ComparasionType');
            $comparasionPeriod = $caller.find('#ComparasionPeriod');
            $average = $caller.find('#Average');

            // (!isMobileDevice()) {
            $btnCompare = $caller.find('#btnComparisonGD');
            $mobBtnCompare = $caller.find('.mob-filter-button.graph-filter');

            addEventListeners();
        };

        init();

        function addEventListeners() {
            $btnCompare.click(function (e) {
                e.preventDefault();
                e.stopPropagation();

                if ($comparationType.val() == 1) {
                    GraphView.GraphType = 'graph';
                }
                else {
                    GraphView.GraphType = 'diagram';
                }

                GraphView.SetGraph();
            });

            $mobBtnCompare.click(function (e) {
                e.preventDefault();
                e.stopPropagation();

                if ($comparationType.val() == 1) {
                    GraphView.GraphType = 'graph';
                }
                else {
                    GraphView.GraphType = 'diagram';
                }

                GraphView.SetGraph();

                $('.tab-item-active').click();
            });

            $comparationType.change(function (e) {
                var parentClass = isMobileDevice() ? '.mob-filter-container' : '.panel-comparison-1'

                if ($(this).val() == 1) {
                    $average.parents(parentClass).hide();
                    $comparasionPeriod.parents(parentClass).show();
                }
                else if ($(this).val() == 2) {
                    $average.parents(parentClass).show();
                    $comparasionPeriod.parents(parentClass).hide();
                }
            });
        }

        this.getPriceDisplayType = function () {
            return $priceDisplay.val();
        };

        this.getComperationPeriod = function () {
            return $comparasionPeriod.val();
        };

        this.getAverageType = function () {
            return $average.val();
        };

        this.getComparationType = function () {
            return $comparationType.val();
        };
    }
}(jQuery));;


var PanelCalculate = {

    Init: function () {
        PanelCalculate.Events();
        PanelCalculate.Settings();
    },
    Events: function () {

        $("#list select option").on("click", function () {
            event.preventDefault();
        });
        $("#ComparisonDateType").on("change", function () {
            var index = parseInt($("#ComparisonDateType").val());
            var state = $("#PercentChangeDaily")[0].checked;
            $(".table-view-row, .gallary-view-item").css("display", "none");
            if (index > 0) {
                $(".table-row-" + index).css("display", "table-cell");
                $(".gallary-view-item-" + index).css("display", "block");
            }
            TableView.WidthColumns(index, state);
        });
        $("#PercentChangeDaily").on("change", function ()
        {
            if ($(this).is(':checked'))
                $(this).val('true')
            else
                $(this).val('false')
            var index = parseInt($("#ComparisonDateType").val());
            var state = $("#PercentChangeDaily")[0].checked;

            if (state) {
                $(".table-row-6").css("display", "table-cell");
                $(".content-item-2").css("display", "block");
            }
            else {
                $(".table-row-6").css("display", "none");
                $(".content-item-2").css("display", "none");
            }
            TableView.WidthColumns(index, state);
        });
    },

    Settings: function () {
        var index = parseInt($("#ComparisonDateType").val());
        var state = $("#PercentChangeDaily")[0].checked;
        TableView.WidthColumns(index, state);
        $("#ComparisonDate").datepicker({
            dateFormat: "dd.mm.yy",
            isRTL: true,
            maxDate: 0,
            beforeShow: function (input, inst) {
                inst.dpDiv.css({ marginLeft: input.offsetWidth - 35 + 'px' });
            }
        });
        PanelCalculate.PrecentChangeDaily();
        PanelCalculate.ComparisonDateType();

        $('#ProductName').cusAutoComplete({
            items: Global.Items.map(function (item) {
                return {
                    pname: item.label,
                    label: item.label + " (" + item.siteName + ")",
                    value: item.value,
                    siteId: item.siteId,
                    itemId: item.itemId
                };
            }),
            hiddenId: "ProductId"
        });
    },

    Active: function () {

    },

    ComparisonDateType: function () {
        var index = parseInt($("#ComparisonDateType").val());

        $(".gallary-view-item").css("display", "none");
        if (index > 0) {
            $(".gallary-view-item-" + index).css("display", "unset");
        }
        $(".table-view-row").css("display", "none");
        if (index > 0) {
            $(".table-row-" + index).css("display", "table-cell");
        }
    },

    PrecentChangeDaily: function () {
        var state = $("#PercentChangeDaily")[0].checked;
        if (state) {
            $(".table-row-6").css("display", "table-cell");
            $(".content-item-2").css("display", "block");
        }
        else {
            $(".table-row-6").css("display", "none");
            $(".content-item-2").css("display", "none");
        }
    },

    GetQueryString: function () {
        var checkbox = $("#PercentChangeDaily");
        if (checkbox.is(':checked')) {
            checkbox.attr('value', 'true');
        } else {
            checkbox.attr('value', 'false');
        }
        var queryString = "?" + $("form.form-calculate").serialize();
        return queryString;
    }
};
var PanelControl = {
    Init: function () {
        PanelControl.Events();
        PanelControl.Settings();
    },
    Events: function () {
        $(".date-next").on("click", function () {
            PanelControl.BtnDateNext($("#PanelControlDate"));
        });
        $(".date-previous").on("click", function () {
            PanelControl.BtnDatePrevious($("#PanelControlDate"));
        });
        $("#btnToXml").on("click", function (e) {
            PanelControl.ToExcel();
        });
        $("#btnToPdf").on("click", function () {
            //PanelControl.ToPDF();
            window.open("PDF/GeneratePDF" + PanelCalculate.GetQueryString(), "_blank");
        });
        $("#btnMailto").on("click", function () {
            Header.Mailto();
        });
        $(".share").on("click", function () {
            Header.Share(event);
        });
        $("#btnPrint").on("click", function () {
            PopUps.ShowPopUp(4);
        });
    },

    Settings: function () {
        $.datepicker.setDefaults($.datepicker.regional['he']);
        $("#PanelControlDate").datepicker({
            dateFormat: "dd.mm.yy",
            isRTL: true,
            maxDate: 0,
            beforeShow: function (input, inst) {
                inst.dpDiv.css({ marginLeft: 28 + 'px' });
            },
            onSelect: function (dateText, inst) {
                PanelControl.PanelControlDateChange(dateText);
            }
        });
    },

    PanelControlDateChange: function (date) {
        $('#ComparisonDate').datepicker("setDate", date);
        var selected = DeskMobile.GetSelectedView();
        if (selected == 3) {
            //$('.pn-cmp-container form').submit();
            $('.pn-cal-container form').submit();
        }
        else {
            $('.pn-cal-container form').submit();
        }
    },

    BtnDateNext: function (element) {
        console.log|(element)
        alert('sdas')
        var date = element.datepicker('getDate');
        date.setDate(date.getDate() + 1);
        if (new Date() >= date) {
            element.datepicker("setDate", date)
            PanelControl.PanelControlDateChange(date);
        }
    },

    BtnDatePrevious: function (element) {
        var date = element.datepicker('getDate');
        date.setDate(date.getDate() - 1);
        element.datepicker("setDate", date);
        PanelControl.PanelControlDateChange(date);
    },

    ObjectCoulmnsTable: function () {

        var columns = [{ title: "תוצרת", key: "ProductName" }, { title: 'מחיר יומי סוג א בש"ח', key: "DailyPriceA" }, { title: 'מחיר יומי מובחר בש"ח', key: "DailyPriceM" }];

        var isChecked = $("#PercentChangeDaily")[0].checked;
        var precentChange = parseInt($("#ComparisonDateType").val());

        if (isChecked) {
            columns.push({ title: 'אחוז שינוי יומי סוג א', key: "DailyChangeA" });
            columns.push({ title: "אחוז שיונוי יומי מובחר", key: "DailyChangeM" });
        }

        switch (precentChange) {
            case "0":
                break;
            case "1":
                columns.push({ title: 'מחיר ממוצע שבועי סוג א', key: "WeekPriceA" });
                columns.push({ title: 'מחיר ממוצע שבועי מובחר', key: "WeekPriceM" });
                break;
            case "2":
                columns.push({ title: 'מחיר ממוצע חודשי סוג א', key: "MonthPriceA" });
                columns.push({ title: 'מחיר ממוצע חודשי מובחר', key: "MonthPriceM" });
                break;
            case "3":
                columns.push({ title: 'מחיר ממוצע רבעוני סוג א', key: "QuarterPriceA" });
                columns.push({ title: 'מחיר ממוצע רבעוני מובחר', key: "QuarterPriceM" });
                break;
            case "4":
                columns.push({ title: "מחיר ממוצע חציוני סוג א", key: "HalfPriceA" });
                columns.push({ title: "מחיר ממוצע חציוני מובחר", key: "HalfPriceM" });
                break;
            case "5":
                columns.push({ title: "מחיר ממוצע שנתי סוג א", key: "YearPriceA" });
                columns.push({ title: "מחיר ממוצע שנתי מובחר", key: "YearPriceM" });
                break;
            default:
                break;
        }

        return columns;
    },

    ArrayCoulmnsTable: function () {
        var isChecked = $("#PercentChangeDaily")[0].checked;
        var precentChange = parseInt($("#ComparisonDateType").val());
        var customProprties = ['מחיר יומי מובחר בש"ח', 'מחיר יומי סוג א בש"ח', 'תוצרת'];

        if (isChecked) {
            customProprties.push('אחוז שינוי יומי סוג א');
            customProprties.push('אחוז שינוי יומי מובחר');
        }

        switch (precentChange) {
            case "1":
                customProprties.push('מחיר ממוצע שבועי סוג א');
                customProprties.push('מחיר ממוצע שבועי מובחר');
                break;
            case "2":
                customProprties.push('מחיר ממוצע חודשי סוג א');
                customProprties.push('מחיר ממוצע חודשי מובחר');
                break;
            case "3":
                customProprties.push('מחיר ממוצע רבעוני סוג א');
                customProprties.push('מחיר ממוצע רבעוני מובחר');
                break;
            case "4":
                customProprties.push('מחיר ממוצע חציוני סוג א');
                customProprties.push('מחיר ממוצע חציוני מובחר');
                break;
            case "5":
                customProprties.push('מחיר ממוצע שנתי סוג א');
                customProprties.push('מחיר ממוצע שנתי מובחר');
                break;
            default:
        }

        return customProprties;
    },

    MapProductJSON: function (leng, collection) {

        var objProducts = [];
        var prices = [];

        if (collection == null) {
            prices = Price.Items;
        } else {
            prices = collection;
        }

        $.each(prices, function (index, item) {

            ProductName = item.Product.Name;
            DailyChangeA = (item.DailyChangeA != null ? item.DailyChangeA.toString() : "");
            DailyChangeM = (item.DailyChangeM != null ? item.DailyChangeM.toString() : "");
            DailyPriceA = (item.DailyPriceA != null ? item.DailyPriceA.toString() : "");
            DailyPriceM = (item.DailyPriceM != null ? item.DailyPriceM.toString() : "");
            WeekPriceA = (item.WeekPriceA != null ? item.WeekPriceA.toString() : "");
            WeekPriceM = (item.WeekPriceM != null ? item.WeekPriceM.toString() : "");
            MonthPriceA = (item.MonthPriceA != null ? item.MonthPriceA.toString() : "");
            MonthPriceM = (item.MonthPriceM != null ? item.MonthPriceM.toString() : "");
            QuarterPriceA = (item.QuarterPriceA != null ? item.QuarterPriceA.toString() : "");
            QuarterPriceM = (item.QuarterPriceM != null ? item.QuarterPriceM.toString() : "");
            HalfPriceA = (item.HalfPriceA != null ? item.HalfPriceA.toString() : "");
            HalfPriceM = (item.HalfPriceM != null ? item.HalfPriceM.toString() : "");
            YearPriceA = (item.YearPriceA != null ? item.YearPriceA.toString() : "");
            YearPriceM = (item.YearPriceM != null ? item.YearPriceM.toString() : "");

            if (leng == "eng") {
                objProducts.push({
                    "ProductName": ProductName,
                    "DailyChangeA": DailyChangeA,
                    "DailyChangeM": DailyChangeM,
                    "DailyPriceA": DailyPriceA,
                    "DailyPriceM": DailyPriceM,
                    "WeekPriceA": WeekPriceA,
                    "WeekPriceM": WeekPriceM,
                    "MonthPriceA": MonthPriceA,
                    "MonthPriceM": MonthPriceM,
                    "QuarterPriceA": QuarterPriceA,
                    "QuarterPriceM": QuarterPriceM,
                    "HalfPriceA": HalfPriceA,
                    "HalfPriceM": HalfPriceM,
                    "YearPriceA": YearPriceA,
                    "YearPriceM": YearPriceM
                });
            }
            else if (leng == "hebr") {
                objProducts.push({
                    'תוצרת': ProductName,
                    'מחיר יומי סוג א בש"ח': DailyPriceA,
                    'מחיר יומי מובחר בש"ח': DailyPriceM,
                    'אחוז שינוי יומי סוג א': DailyChangeA,
                    'אחוז שינוי יומי מובחר': DailyChangeM,
                    'מחיר ממוצע שבועי סוג א': WeekPriceA,
                    'מחיר ממוצע שבועי מובחר': WeekPriceM,
                    'מחיר ממוצע חודשי סוג א': MonthPriceA,
                    'מחיר ממוצע חודשי מובחר': MonthPriceM,
                    'מחיר ממוצע רבעוני סוג א': QuarterPriceA,
                    'מחיר ממוצע רבעוני מובחר': QuarterPriceM,
                    'מחיר ממוצע חציוני סוג א': HalfPriceA,
                    'מחיר ממוצע חציוני מובחר': HalfPriceM,
                    'מחיר ממוצע שנתי סוג א': YearPriceA,
                    'מחיר ממוצע שנתי מובחר': YearPriceM
                });
            }
        });

        return objProducts;
    },

    GetTable: function () {

        var isChecked = $("#PercentChangeDaily")[0].checked;
        var precentChange = parseInt($("#ComparisonDateType").val());

        var sb = new StringBuilder();

        sb.append('<table id="TempProductTable">');
        sb.append('<thead style="background-color:rgb(35, 62, 81);">');
        sb.append('<tr style="width:100%;">');
        
        sb.append('<th data-f-bold="true" data-a-h="center" >' + 'תוצרת' + '</th>');
        sb.append('<th data-f-bold="true" data-a-h="center" >מחיר יומי סוג א בש"ח</th>');
        sb.append('<th data-f-bold="true" data-a-h="center" >מחיר יומי מובחר בש"ח</th>');

        if (isChecked) {
            sb.append('<th data-f-bold="true" data-a-h="center" >אחוז שינוי יומי סוג א</th>');
            sb.append('<th data-f-bold="true" data-a-h="center" >אחוז שינוי יומי מובחר</th>');
        }

        switch (precentChange) {
            case 1:
                sb.append('<th data-f-bold="true" data-a-h="center" >מחיר ממוצע שבועי סוג א</th>');
                sb.append('<th data-f-bold="true" data-a-h="center" >מחיר ממוצע שבועי מובחר</th>');
                break;
            case 2:
                sb.append('<th data-f-bold="true" data-a-h="center" >מחיר ממוצע חודשי סוג א</th>');
                sb.append('<th data-f-bold="true" data-a-h="center" >מחיר ממוצע חודשי מובחר</th>');
                break;
            case 3:
                sb.append('<th data-f-bold="true" data-a-h="center" >מחיר ממוצע רבעוני סוג א</th>');
                sb.append('<th data-f-bold="true" data-a-h="center" >מחיר ממוצע רבעוני מובחר</th>');
                break;
            case 4:
                sb.append('<th data-f-bold="true" data-a-h="center" >מחיר ממוצע חציוני סוג א</th>');
                sb.append('<th data-f-bold="true" data-a-h="center" >מחיר ממוצע חציוני מובחר</th>');
                break;
            case 5:
                sb.append('<th data-f-bold="true" data-a-h="center" >מחיר ממוצע שנתי סוג א</th>');
                sb.append('<th data-f-bold="true" data-a-h="center" >מחיר ממוצע שנתי מובחר</th>');
                break;
            default:
                break;
        }

        sb.append('</tr>');
        sb.append('</thead>');
        sb.append('<tbody>');

        $.each(Price.Items, function (index, item) {

            ProductName = item.Product.Name;
            DailyChangeA = (item.DailyChangeA != null ? item.DailyChangeA.toString() : "");
            DailyChangeM = (item.DailyChangeM != null ? item.DailyChangeM.toString() : "");
            DailyPriceA = (item.DailyPriceA != null ? item.DailyPriceA.toString() : "");
            DailyPriceM = (item.DailyPriceM != null ? item.DailyPriceM.toString() : "");
            WeekPriceA = (item.WeekPriceA != null ? item.WeekPriceA.toString() : "");
            WeekPriceM = (item.WeekPriceM != null ? item.WeekPriceM.toString() : "");
            MonthPriceA = (item.MonthPriceA != null ? item.MonthPriceA.toString() : "");
            MonthPriceM = (item.MonthPriceM != null ? item.MonthPriceM.toString() : "");
            QuarterPriceA = (item.QuarterPriceA != null ? item.QuarterPriceA.toString() : "");
            QuarterPriceM = (item.QuarterPriceM != null ? item.QuarterPriceM.toString() : "");
            HalfPriceA = (item.HalfPriceA != null ? item.HalfPriceA.toString() : "");
            HalfPriceM = (item.HalfPriceM != null ? item.HalfPriceM.toString() : "");
            YearPriceA = (item.YearPriceA != null ? item.YearPriceA.toString() : "");
            YearPriceM = (item.YearPriceM != null ? item.YearPriceM.toString() : "");

            sb.append('<tr>');
            sb.append('<td data-a-h="right">' + ProductName + '</td>');
            sb.append('<td data-a-h="right">' + DailyPriceA + '</td>');
            sb.append('<td data-a-h="right">' + DailyPriceM + '</td>');

            if (isChecked) {
                sb.append('<td data-a-h="right">' + DailyChangeA + '</td>');
                sb.append('<td data-a-h="right">' + DailyChangeM + '</td>');
            }

            switch (precentChange) {
                case 0:
                    break;
                case 1:
                    sb.append('<td data-a-h="right">' + WeekPriceA + '</td>');
                    sb.append('<td data-a-h="right">' + WeekPriceM + '</td>');
                    break;
                case 2:
                    sb.append('<td data-a-h="right">' + MonthPriceA + '</td>');
                    sb.append('<td data-a-h="right">' + MonthPriceM + '</td>');
                    break;
                case 3:
                    sb.append('<td data-a-h="right">' + QuarterPriceA + '</td>');
                    sb.append('<td data-a-h="right">' + QuarterPriceM + '</td>');
                    break;
                case 4:
                    sb.append('<td data-a-h="right">' + HalfPriceA + '</td>');
                    sb.append('<td data-a-h="right">' + HalfPriceM + '</td>');
                    break;
                case 5:
                    sb.append('<td data-a-h="right">' + YearPriceA + '</td>');
                    sb.append('<td data-a-h="right">' + YearPriceM + '</td>');
                    break;
                default:
                    break;
            }
            sb.append('</tr>');

            ProductName, DailyChangeA, DailyPriceA, DailyChangeM, DailyPriceM, WeekPriceA, WeekPriceM, MonthPriceA, MonthPriceM, QuarterPriceA, QuarterPriceM, HalfPriceA, HalfPriceM, YearPriceA, YearPriceM = "";
        });

        sb.append('</tbody>');
        sb.append('</table>');

        return sb.toString();
    },

    ToPDF: function () {
        var doc = new jsPDF("p", "pt", "a2");
        doc.autoTable(PanelControl.ObjectCoulmnsTable(), PanelControl.MapProductJSON("eng"), {});
        doc.autoencode = true;
        doc.save("table.pdf");
    },

    ToPDF2: function () {
        var pdf = new jsPDF();
        pdf.addHTML(PanelControl.GetTable()[0], function () {
            pdf.save('web.pdf');
        });
    },

    ToPDF3: function () {

        var pdfInfo = {

        }

        var dd = {
            pageOrientation: 'landscape',
            content: [
            {
                style: 'tableExample',
                table: {
                    widths: ['*', '*', '*'],
                    body: [
                        [{ text: 'תוצרת', alignment: 'center' }, { text: 'מחיר יומי סוג א בש"ח', alignment: 'center' }, { text: 'מחיר יומי מובחר בש"ח', alignment: 'center' }],
                        ['Goal', { text: "", alignment: 'right' }, { text: "", alignment: 'right' }],
                        ['Total', '', { text: "", alignment: 'right' }],
                        ['Percentage', { text: "", alignment: 'right' }, { text: "", alignment: 'right' }]
                    ]
                }

            }
            ]
        };

        pdfMake.createPdf(dd).download('optionalName.pdf');
    },

    ToExcel: function () {
        var table = $(PanelControl.GetTable())[0];
        TableToExcel.convert(table, {
            name: 'מחירי_תוצרת_הארץ_' + $("#PanelControlDate")[0].value + '.xlsx'
        });
    },

    PrintAll: function () {
        printJS({
            printable: PanelControl.MapProductJSON("hebr"),
            properties: PanelControl.ArrayCoulmnsTable(),
            type: 'json', 
            gridHeaderStyle: 'background-color: #233e51;  border: 1px solid #515151;',
            gridStyle: 'border: 1px solid #515151;'
        });
    },

    PrintCustom: function () {

    },

    ViewType: function (name) {
        var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
        if (results == null) {
            return null;
        }
        else {
            return decodeURI(results[1]) || 0;
        }
    }
}

function StringBuilder(value) {
    this.strings = new Array("");
    this.append(value);
}

StringBuilder.prototype.append = function (value) {
    if (value) {
        this.strings.push(value);
    }
}

StringBuilder.prototype.clear = function () {
    this.strings.length = 1;
}

StringBuilder.prototype.toString = function () {
    return this.strings.join("");
}

;
/**
* jQuery jPages v0.7
* Client side pagination with jQuery
* http://luis-almeida.github.com/jPages
*
* Licensed under the MIT license.
* Copyright 2012 Luís Almeida
* https://github.com/luis-almeida
*/

; (function ($, window, document, undefined) {

    var name = "jPages",
        instance = null,
        defaults = {
            containerID: "",
            first: false,
            previous: "← previous",
            next: "next →",
            last: false,
            links: "numeric", // blank || title
            startPage: 1,
            perPage: 10,
            midRange: 5,
            startRange: 1,
            endRange: 1,
            keyBrowse: false,
            scrollBrowse: false,
            pause: 0,
            clickStop: false,
            delay: 50,
            direction: "forward", // backwards || auto || random ||
            animation: "", // http://daneden.me/animate/ - any entrance animations
            fallback: 400,
            minHeight: true,
            callback: undefined // function( pages, items ) { }
        };


    function Plugin(element, options) {
        this.options = $.extend({}, defaults, options);

        this._container = $("." + this.options.containerID);
        //if (!this._container.length || _container[0].childElementCount) return;

        this.jQwindow = $(window);
        this.jQdocument = $(document);

        this._holder = $(element);
        this._nav = {};

        this._first = $(this.options.first);
        this._previous = $(this.options.previous);
        this._next = $(this.options.next);
        this._last = $(this.options.last);

        /* only visible items! */
        this._items = this._container.children("*");
        this._itemsShowing = $([]);
        this._itemsHiding = $([]);

        this._numPages = Math.ceil(this._items.length / this.options.perPage);
        this._currentPageNum = this.options.startPage;

        this._clicked = false;
        this._cssAnimSupport = this.getCSSAnimationSupport();

        this.init();
    }

    Plugin.prototype = {

        constructor: Plugin,

        getCSSAnimationSupport: function () {
            var animation = false,
                animationstring = 'animation',
                keyframeprefix = '',
                domPrefixes = 'Webkit Moz O ms Khtml'.split(' '),
                pfx = '',
                elm = this._container.get(0);

            if (elm.style.animationName) animation = true;

            if (animation === false) {
                for (var i = 0; i < domPrefixes.length; i++) {
                    if (elm.style[domPrefixes[i] + 'AnimationName'] !== undefined) {
                        pfx = domPrefixes[i];
                        animationstring = pfx + 'Animation';
                        keyframeprefix = '-' + pfx.toLowerCase() + '-';
                        animation = true;
                        break;
                    }
                }
            }

            return animation;
        },

        init: function () {
            this.setStyles();
            this.setNav();
            this.paginate(this._currentPageNum);
            this.setMinHeight();
        },

        setStyles: function () {
            var requiredStyles = "<style>" +
            ".jp-invisible { visibility: hidden !important; } " +
            ".jp-hidden { display: none !important; }" +
            "</style>";

            $(requiredStyles).appendTo("head");

            if (this._cssAnimSupport && this.options.animation.length)
                this._items.addClass("animated jp-hidden");
            else this._items.hide();

        },

        setNav: function () {
            var navhtml = this.writeNav();

            this._holder.each(this.bind(function (index, element) {
                var holder = $(element);
                holder.html(navhtml);
                this.cacheNavElements(holder, index);
                this.bindNavHandlers(index);
                this.disableNavSelection(element);
            }, this));

            if (this.options.keyBrowse) this.bindNavKeyBrowse();
            if (this.options.scrollBrowse) this.bindNavScrollBrowse();
        },

        writeNav: function () {
            var i = 1, navhtml;
            navhtml = this.writeBtn("first") + this.writeBtn("previous");

            for (; i <= this._numPages; i++) {
                if (i === 1 && this.options.startRange === 0) navhtml += "<span>...</span>";
                if (i > this.options.startRange && i <= this._numPages - this.options.endRange)
                    navhtml += "<a href='#' class='jp-hidden'>";
                else
                    navhtml += "<a>";

                switch (this.options.links) {
                    case "numeric":
                        navhtml += i;
                        break;
                    case "blank":
                        break;
                    case "title":
                        var title = this._items.eq(i - 1).attr("data-title");
                        navhtml += title !== undefined ? title : "";
                        break;
                }

                navhtml += "</a>";
                if (i === this.options.startRange || i === this._numPages - this.options.endRange)
                    navhtml += "<span>...</span>";
            }
            navhtml += this.writeBtn("next") + this.writeBtn("last") + "</div>";
            return navhtml;
        },

        writeBtn: function (which) {

            return this.options[which] !== false && !$(this["_" + which]).length ?
            "<a class='jp-" + which + "'>" + this.options[which] + "</a>" : "";

        },

        cacheNavElements: function (holder, index) {
            this._nav[index] = {};
            this._nav[index].holder = holder;
            this._nav[index].first = this._first.length ? this._first : this._nav[index].holder.find("a.jp-first");
            this._nav[index].previous = this._previous.length ? this._previous : this._nav[index].holder.find("a.jp-previous");
            this._nav[index].next = this._next.length ? this._next : this._nav[index].holder.find("a.jp-next");
            this._nav[index].last = this._last.length ? this._last : this._nav[index].holder.find("a.jp-last");
            this._nav[index].fstBreak = this._nav[index].holder.find("span:first");
            this._nav[index].lstBreak = this._nav[index].holder.find("span:last");
            this._nav[index].pages = this._nav[index].holder.find("a").not(".jp-first, .jp-previous, .jp-next, .jp-last");
            this._nav[index].permPages =
              this._nav[index].pages.slice(0, this.options.startRange)
                .add(this._nav[index].pages.slice(this._numPages - this.options.endRange, this._numPages));
            this._nav[index].pagesShowing = $([]);
            this._nav[index].currentPage = $([]);
        },

        bindNavHandlers: function (index) {
            var nav = this._nav[index];

            // default nav
            nav.holder.bind("click.jPages", this.bind(function (evt) {
                var newPage = this.getNewPage(nav, $(evt.target));
                if (this.validNewPage(newPage)) {
                    this._clicked = true;
                    this.paginate(newPage);
                }
                evt.preventDefault();
            }, this));

            // custom first
            if (this._first.length) {
                this._first.bind("click.jPages", this.bind(function () {
                    if (this.validNewPage(1)) {
                        this._clicked = true;
                        this.paginate(1);
                    }
                }, this));
            }

            // custom previous
            if (this._previous.length) {
                this._previous.bind("click.jPages", this.bind(function () {
                    var newPage = this._currentPageNum - 1;
                    if (this.validNewPage(newPage)) {
                        this._clicked = true;
                        this.paginate(newPage);
                    }
                }, this));
            }

            // custom next
            if (this._next.length) {
                this._next.bind("click.jPages", this.bind(function () {
                    var newPage = this._currentPageNum + 1;
                    if (this.validNewPage(newPage)) {
                        this._clicked = true;
                        this.paginate(newPage);
                    }
                }, this));
            }

            // custom last
            if (this._last.length) {
                this._last.bind("click.jPages", this.bind(function () {
                    if (this.validNewPage(this._numPages)) {
                        this._clicked = true;
                        this.paginate(this._numPages);
                    }
                }, this));
            }

        },

        disableNavSelection: function (element) {
            if (typeof element.onselectstart != "undefined")
                element.onselectstart = function () {
                    return false;
                };
            else if (typeof element.style.MozUserSelect != "undefined")
                element.style.MozUserSelect = "none";
            else
                element.onmousedown = function () {
                    return false;
                };
        },

        bindNavKeyBrowse: function () {
            this.jQdocument.bind("keydown.jPages", this.bind(function (evt) {
                var target = evt.target.nodeName.toLowerCase();
                if (this.elemScrolledIntoView() && target !== "input" && target != "textarea") {
                    var newPage = this._currentPageNum;

                    if (evt.which == 37) newPage = this._currentPageNum - 1;
                    if (evt.which == 39) newPage = this._currentPageNum + 1;

                    if (this.validNewPage(newPage)) {
                        this._clicked = true;
                        this.paginate(newPage);
                    }
                }
            }, this));
        },

        elemScrolledIntoView: function () {
            var docViewTop, docViewBottom, elemTop, elemBottom;
            docViewTop = this.jQwindow.scrollTop();
            docViewBottom = docViewTop + this.jQwindow.height();
            elemTop = this._container.offset().top;
            elemBottom = elemTop + this._container.height();
            return ((elemBottom >= docViewTop) && (elemTop <= docViewBottom));

            // comment above and uncomment below if you want keyBrowse to happen
            // only when container is completely visible in the page
            /*return ((elemBottom >= docViewTop) && (elemTop <= docViewBottom) &&
                      (elemBottom <= docViewBottom) &&  (elemTop >= docViewTop) );*/
        },

        bindNavScrollBrowse: function () {
            this._container.bind("mousewheel.jPages DOMMouseScroll.jPages", this.bind(function (evt) {
                var newPage = (evt.originalEvent.wheelDelta || -evt.originalEvent.detail) > 0 ?
                (this._currentPageNum - 1) : (this._currentPageNum + 1);
                if (this.validNewPage(newPage)) {
                    this._clicked = true;
                    this.paginate(newPage);
                }
                evt.preventDefault();
                return false;
            }, this));
        },

        getNewPage: function (nav, target) {
            if (target.is(nav.currentPage)) return this._currentPageNum;
            if (target.is(nav.pages)) return nav.pages.index(target) + 1;
            if (target.is(nav.first)) return 1;
            if (target.is(nav.last)) return this._numPages;
            if (target.is(nav.previous)) return nav.pages.index(nav.currentPage);
            if (target.is(nav.next)) return nav.pages.index(nav.currentPage) + 2;
        },

        validNewPage: function (newPage) {
            return newPage !== this._currentPageNum && newPage > 0 && newPage <= this._numPages;
        },

        paginate: function (page) {
            var itemRange, pageInterval;
            itemRange = this.updateItems(page);
            pageInterval = this.updatePages(page);
            this._currentPageNum = page;
            if ($.isFunction(this.options.callback))
                this.callback(page, itemRange, pageInterval);

            this.updatePause();
        },

        updateItems: function (page) {
            var range = this.getItemRange(page);
            this._itemsHiding = this._itemsShowing;
            this._itemsShowing = this._items.slice(range.start, range.end);
            if (this._cssAnimSupport && this.options.animation.length) this.cssAnimations(page);
            else this.jQAnimations(page);
            return range;
        },

        getItemRange: function (page) {
            var range = {};
            range.start = (page - 1) * this.options.perPage;
            range.end = range.start + this.options.perPage;
            if (range.end > this._items.length) range.end = this._items.length;
            return range;
        },

        cssAnimations: function (page) {
            clearInterval(this._delay);

            this._itemsHiding
              .removeClass(this.options.animation + " jp-invisible")
              .addClass("jp-hidden");

            this._itemsShowing
              .removeClass("jp-hidden")
              .addClass("jp-invisible");

            this._itemsOriented = this.getDirectedItems(page);
            this._index = 0;

            this._delay = setInterval(this.bind(function () {
                if (this._index === this._itemsOriented.length) clearInterval(this._delay);
                else {
                    this._itemsOriented
                    .eq(this._index)
                    .removeClass("jp-invisible")
                    .addClass(this.options.animation);
                }
                this._index = this._index + 1;
            }, this), this.options.delay);
        },

        jQAnimations: function (page) {
            clearInterval(this._delay);
            this._itemsHiding.addClass("jp-hidden");
            this._itemsShowing.fadeTo(0, 0).removeClass("jp-hidden");
            this._itemsOriented = this.getDirectedItems(page);
            this._index = 0;
            this._delay = setInterval(this.bind(function () {
                if (this._index === this._itemsOriented.length) clearInterval(this._delay);
                else {
                    this._itemsOriented
                    .eq(this._index)
                    .fadeTo(this.options.fallback, 1);
                }
                this._index = this._index + 1;
            }, this), this.options.delay);
        },

        getDirectedItems: function (page) {
            var itemsToShow;

            switch (this.options.direction) {
                case "backwards":
                    itemsToShow = $(this._itemsShowing.get().reverse());
                    break;
                case "random":
                    itemsToShow = $(this._itemsShowing.get().sort(function () {
                        return (Math.round(Math.random()) - 0.5);
                    }));
                    break;
                case "auto":
                    itemsToShow = page >= this._currentPageNum ?
                    this._itemsShowing : $(this._itemsShowing.get().reverse());
                    break;
                default:
                    itemsToShow = this._itemsShowing;
            }

            return itemsToShow;
        },

        updatePages: function (page) {
            var interval, index, nav;
            interval = this.getInterval(page);
            for (index in this._nav) {
                if (this._nav.hasOwnProperty(index)) {
                    nav = this._nav[index];
                    this.updateBtns(nav, page);
                    this.updateCurrentPage(nav, page);
                    this.updatePagesShowing(nav, interval);
                    this.updateBreaks(nav, interval);
                }
            }
            return interval;
        },

        getInterval: function (page) {
            var neHalf, upperLimit, start, end;
            neHalf = Math.ceil(this.options.midRange / 2);
            upperLimit = this._numPages - this.options.midRange;
            start = page > neHalf ? Math.max(Math.min(page - neHalf, upperLimit), 0) : 0;
            end = page > neHalf ?
              Math.min(page + neHalf - (this.options.midRange % 2 > 0 ? 1 : 0), this._numPages) :
              Math.min(this.options.midRange, this._numPages);
            return { start: start, end: end };
        },

        updateBtns: function (nav, page) {
            if (page === 1) {
                nav.first.addClass("jp-disabled");
                nav.previous.addClass("jp-disabled");
            }
            if (page === this._numPages) {
                nav.next.addClass("jp-disabled");
                nav.last.addClass("jp-disabled");
            }
            if (this._currentPageNum === 1 && page > 1) {
                nav.first.removeClass("jp-disabled");
                nav.previous.removeClass("jp-disabled");
            }
            if (this._currentPageNum === this._numPages && page < this._numPages) {
                nav.next.removeClass("jp-disabled");
                nav.last.removeClass("jp-disabled");
            }
        },

        updateCurrentPage: function (nav, page) {
            nav.currentPage.removeClass("jp-current");
            nav.currentPage = nav.pages.eq(page - 1).addClass("jp-current");
        },

        updatePagesShowing: function (nav, interval) {
            var newRange = nav.pages.slice(interval.start, interval.end).not(nav.permPages);
            nav.pagesShowing.not(newRange).addClass("jp-hidden");
            newRange.not(nav.pagesShowing).removeClass("jp-hidden");
            nav.pagesShowing = newRange;
        },

        updateBreaks: function (nav, interval) {
            if (
              interval.start > this.options.startRange ||
              (this.options.startRange === 0 && interval.start > 0)
            ) nav.fstBreak.removeClass("jp-hidden");
            else nav.fstBreak.addClass("jp-hidden");

            if (interval.end < this._numPages - this.options.endRange) nav.lstBreak.removeClass("jp-hidden");
            else nav.lstBreak.addClass("jp-hidden");
        },

        callback: function (page, itemRange, pageInterval) {
            var pages = {
                current: page,
                interval: pageInterval,
                count: this._numPages
            },
                items = {
                    showing: this._itemsShowing,
                    oncoming: this._items.slice(itemRange.start + this.options.perPage, itemRange.end + this.options.perPage),
                    range: itemRange,
                    count: this._items.length
                };

            pages.interval.start = pages.interval.start + 1;
            items.range.start = items.range.start + 1;
            this.options.callback(pages, items);
        },

        updatePause: function () {
            if (this.options.pause && this._numPages > 1) {
                clearTimeout(this._pause);
                if (this.options.clickStop && this._clicked) return;
                else {
                    this._pause = setTimeout(this.bind(function () {
                        this.paginate(this._currentPageNum !== this._numPages ? this._currentPageNum + 1 : 1);
                    }, this), this.options.pause);
                }
            }
        },

        setMinHeight: function () {
            if (this.options.minHeight && !this._container.is("table, tbody")) {
                setTimeout(this.bind(function () {
                    this._container.css({ "min-height": "500px" }); //this._container.css("height")
                }, this), 1000);
            }
        },

        bind: function (fn, me) {
            return function () {
                return fn.apply(me, arguments);
            };
        },

        destroy: function () {
            this.jQdocument.unbind("keydown.jPages");
            this._container.unbind("mousewheel.jPages DOMMouseScroll.jPages");

            if (this.options.minHeight) this._container.css("min-height", "");
            if (this._cssAnimSupport && this.options.animation.length)
                this._items.removeClass("animated jp-hidden jp-invisible " + this.options.animation);
            else this._items.removeClass("jp-hidden").fadeTo(0, 1);
            this._holder.unbind("click.jPages").empty();
        }

    };

    $.fn[name] = function (arg) {
        var type = $.type(arg);

        if (type === "object") {
            if (this.length && !$.data(this, name)) {
                instance = new Plugin(this, arg);
                this.each(function () {
                    $.data(this, name, instance);
                });
            }
            return this;
        }

        if (type === "string" && arg === "destroy") {
            instance.destroy();
            this.each(function () {
                $.removeData(this, name);
            });
            return this;
        }

        if (type === 'number' && arg % 1 === 0) {
            if (instance.validNewPage(arg)) instance.paginate(arg);
            return this;
        }

        return this;
    };

})(jQuery, window, document);
;


var GalleryView = {

    Init: function () {
        GalleryView.Events();
        GalleryView.Settings();
    },

    Events: function () {
        $("#GallaryLeft").on("click", function () {
            //$("#GallaryPagination > a.jp-next").click();
        });
        $("#GallaryRigth").on("click", function () {
            //$("#GallaryPagination > a.jp-previous").click();
        });
    },

    Settings: function () {
        // GalleryView.Pagination();
        GalleryView.Tooltip();
    },

    CheckElement: function (id) {
        $("#gallarycheck" + id).prop('checked', true);
        $("#GallaryItem" + id).addClass("active-gallary");
        $("#GallaryItem" + id).find(".check-gallary").css({ "display": "none" });
        $("#GallaryItem" + id).find(".checked-gallary").css({ "display": "block" });
    },

    UnCheckElement: function (id) {
        $("#gallarycheck" + id).prop('checked', false);
        $("#GallaryItem" + id).removeClass("active-gallary");
        $("#GallaryItem" + id).find(".check-gallary").css({ "display": "block" });
        $("#GallaryItem" + id).find(".checked-gallary").css({ "display": "none" });
    },

    AddElement: function (item) {
        var type = 1;
        var element = "";
        element += "<section class='gallary-item' id='GallaryItem'" + item.Product.Id + "'>"
                + "<div class='gallary-header'>"
                    + "<div class='product-type'>"
                        + "<div class='type-wholesale'>"
                            + "<p>קמעוני</p>"
                        + "</div>"
                        + "<div class='type-retailer'>"
                           + "<p>סיטוני</p>"
                        + "</div>"
                    + "</div>"
                    + "<img src='" + item.Product.ImageSrc + "' alt='תמונה פרי וירק' />"
                + "</div>"
                + "<div class='gallary-name'>"
                    + "<p>" + item.Product.Name + "</p>"
               + "</div>"
                + "<div class='gallary-content'>"
                   + "<span>סיטוני</span>"
                    + "<div class='content-item-1'>"
                        + "<span>" + (item.DailyPriceA != null ? '₪' + item.DailyPriceA : '&nbsp;') + "</span>"
                        + "<p>מחיר יומי סוג א בש''ח</p>"
                    + "</div>"
                    + "<div class='content-item-1'>"
                        + "<span>" + (item.DailyPriceM != null ? '₪ ' + item.DailyPriceM : '&nbsp;') + "</span>"
                        + "<p>מחיר יומי מובחר בש''ח</p>"
                    + "</div>"
                    + "<div class='content-item-2'>"
                       + " <div class='content-header'>" +
                    (item.DailyChangeA != null && item.DailyChangeA > 0 ? "<i class='fa fa-sort-asc up-row' aria-hidden='true'></i>" : "")
                  + (item.DailyChangeA != null && item.DailyChangeA < 0 ? "<i class='fa fa-sort-desc down-row' aria-hidden='true'></i>" : "")
                  + "<p>" + (item.DailyChangeA != null && item.DailyChangeA != 0 ? item.DailyChangeA + "%" : "&nbsp;") + "</p>"
        + "</div>"
        + "<p>עמודת אחוז שינוי יומי סוג א'</p>"
        + "</div>"
        + "<div class='content-item-2'>"
        + "<div class='content-header'>"
        + (item.DailyChangeM > 0 ? "<i class='fa fa-sort-asc up-row' aria-hidden='true'></i>" : "")
        + (item.DailyChangeM < 0 ? "<i class='fa fa-sort-desc down-row' aria-hidden='true'></i>" : "")
        + "<p>" + (item.DailyChangeM != null && item.DailyChangeM != 0 ? item.DailyChangeM + "%" : "&nbsp;") + "</p>"
        + "</div>"
        + "<p>עמודת אחוז שינוי יומי מובחר</p>"
        + "</div>"
        + "<div class='content-item-3'>"
            + (type == 1 && item.DailyPriceM != null ? "<span>" + "₪ " + item.DailyPriceM + "</span>" : "&nbsp;")
            + (type == 1 ? (type == 1 ? "<p>מחיר ממוצע שבועי מובחר'</p>" : "") : "")
            + (type == 2 ? "<span>" + "₪ " + item.DailyPriceM + "</span>" : "&nbsp;")
            + (type == 2 ? "<p>מחיר ממוצע חודשי מובחר'</p>" : "")
            + (type == 3 ? "<span>" + "₪ " + item.QuarterPriceM + "</span>" : "&nbsp;")
            + (type == 3 ? "<p>מחיר ממוצע רבעוני מובחר'</p>" : "")
            + (type == 4 ? "<span>" + "₪ " + item.HalfPriceM + "</span>" : "&nbsp;")
            + (type == 4 ? "<p>מחיר ממוצע חציוני מובחר'</p>" : "")
            + (type == 5 ? "<span>" + "<span>" + "₪ " + item.HalfPriceM + "</span>" : "&nbsp;")
            + (type == 5 ? "<p>מחיר ממוצע שנתי מובחר'</p>" : "")
        + "</div>"
        + "<div class='content-item-3'>"
            + (type == 1 ? "<span>" + "₪ " + item.DailyPriceA + "</span>" : "&nbsp;")
            + (type == 1 ? "<p>מחיר ממוצע שבועי סוג א'</p>" : "")

            + (type == 2 ? "<span>" + "₪ " + item.DailyPriceA + "</span>" : "&nbsp;")
            + (type == 2 ? "<p>מחיר ממוצע חודשי סוג א'</p>" : "")

            + (type == 3 ? "<span>" + "₪ " + item.QuarterPriceA + "</span>" : "&nbsp;")
            + (type == 3 ? "<p>מחיר ממוצע רבעוני סוג א'</p>" : "")

            + (type == 4 ? "<span>" + "₪ " + item.HalfPriceA + "</span>" : "&nbsp;")
            + (type == 4 ? "<p>מחיר ממוצע חציוני סוג א'</p>" : "")

            + (type == 5 ? "<span>" + "₪ " + item.WeekPriceA + "</span>" : "&nbsp;")
            + (type == 5 ? "<p>מחיר ממוצע שנתי סוג א'</p>" : "")
        + "</div>"
        + "</div>"
            + "<div class='gallary-checker'>"
                + "<input type='checkbox' id='" + "gallarycheck" + item.Product.Id + " id='" + item.Product.Id + "' />"
                + "<div class='check-button check-gallary; id='" + item.Product.Id + "' > הוסף להשוואה</div>"
                + "<div class='check-button checked-gallary' id='" + item.Product.Id + "'>"
            + "</div>"
        + "</div>"
        + "</section>"

        return element;
    },

    RemoveNotChecked: function () {
        $("div.gallary-pagination").jPages({ containerID: "gallary-grid", pause: false, clickStop: true, perPage: 1000, animation: "zoomIn" });
        var gallary = $(".gallary-grid")[0].children;
        for (var i = 0; i < gallary.length; i++) {
            var isChecked = $(gallary[i]).find("input[type=checkbox]")[0].checked;
            if (isChecked) {
                $(".gallary-grid").prepend(gallary[i]);
            }
            else {
                $(gallary[i]).css("display", "none");
            }
        }
        $("div.gallary-pagination").css("display", "none");
    },

    ElementShow: function () {
        var gallary = $(".gallary-grid")[0].children;
        for (var i = 0; i < gallary.length; i++) {
            $(gallary[i]).css("display", "");
        }
    },

    Pagination: function () {
        if (window.innerWidth <= 720) {
            $("div.gallary-pagination").jPages({
                containerID: "gallary-grid",
                pause: false,
                clickStop: true,
                perPage: 1000,
                animation: "zoomIn"
            });
        }
        else {
            $("div.gallary-pagination").jPages({
                containerID: "gallary-grid",
                pause: false,
                clickStop: true,
                perPage: 16,
                animation: "zoomIn"
            });

            $("div.gallary-pagination").css("display", "flex");
        }
    },

    Tooltip: function () {
        $(".price-popup-g").tooltip({
            tooltipClass: "price-mini-popup"
        });
    },

    ShowDailyChange: function (index) {
        $(".gallary-view-item-" + index).css("display", "block");
    },

    HideDailyChange: function () {
        $(".gallary-view-item").css("display", "none");
    },

    ShowPrecentChange: function () {
        $(".content-item-2").css("display", "block");
    },

    HidePrecentChange: function () {
        $(".content-item-2").css("display", "none");
    }
};

var TableView = {

    RowsToFiltring: [""],

    Init: function () {
        TableView.Events();
        TableView.Settings();
        TableView.ShowRows();
    },

    Events: function () {
        $(".left-button").on("click", function () {
            $(".jp-next").click();
        });
        $(".rigth-button").on("click", function () {
            $(".jp-previous").click();
        });
    },

    Settings: function () {
        TableView.Pagination();
        TableView.Tooltip();
        PanelMenuMobile.SetAllDefault();
    },

    SortTable: function (f_sl, n) {
        var rows = $('#ProductTable tbody  tr').get();

        rows.sort(function (a, b) {

            var A = getVal(a);
            var B = getVal(b);

            if (A < B) {
                return -1 * f;
            }
            if (A > B) {
                return 1 * f;
            }
            return 0;
        });

        function getVal(elm) {
            var v = $(elm).children('td').eq(n).text().toUpperCase();
            if ($.isNumeric(v)) {
                v = parseInt(v, 10);
            }
            return v;
        }

        $.each(rows, function (index, row) {
            $('#ProductTable').children('tbody').append(row);
        });
    },

    ShowRows: function () {
        if (window.innerWidth <= 740) {
            $("#ProductTable tbody > tr").css("display", "table-row");
        }
    },

    CheckElement: function (id) {
        $("#tablecheck" + id).prop('checked', true);
    },

    UnCheckElemnet: function () {
        $("#tablecheck" + id).prop('checked', false);
    },

    RemoveNotChecked: function () {
        $(".table-pagination").jPages({
            containerID: "product-table tbody", pause: false, clickStop: true, perPage: 1000, animation: "zoomIn"
        });
        var table = $(".product-table tbody")[0].children;
        for (var i = 0; i < table.length; i++) {
            var isChecked = $(table[i]).find("input[type=checkbox]")[0].checked;
            if (isChecked) {
                $('#ProductTable').prepend(table[i])
            }
            else {
                $(table[i]).css("display", "none");
            }
        }
        $(".table-pagination").css("display", "none");
        $(".slider-buttons").css("display", "none");
    },

    ElementShow: function () {
        var table = $(".product-table tbody")[0].children;
        for (var i = 0; i < table.length; i++) {
            $(table[i]).css("display", "")
        }
    },

    WidthColumnsSummory: function (width) {
        $("#sl11").css("width", width + "%");
        $("#sl12").css("width", width + "%");
        $("#sl13").css("width", width + "%");
        $("#sl14").css("width", width + "%");
    },

    WidthColumnsBase: function (firstWidth, secondWidth) {
        $("#sl15").css("width", firstWidth + "%");
        $("#sl16").css("width", secondWidth + "%");
    },

    WidthColumns: function (index, cheked) {
        switch (index) {
            case 1:
                if (cheked) {
                    $("#sl1").css("width", "13%");
                    $("#sl6").css("width", "13%");
                    TableView.WidthColumnsBase(5, 20);
                    TableView.WidthColumnsSummory(13);
                }
                else {
                    $("#sl1").css("width", "18%");
                    $("#sl6").css("width", "18%");
                    TableView.WidthColumnsBase(5, 25);
                    TableView.WidthColumnsSummory(18);
                }
                break;
            case 2:
                if (cheked) {
                    $("#sl2").css("width", "13%");
                    $("#sl7").css("width", "13%");
                    TableView.WidthColumnsBase(5, 20);
                    TableView.WidthColumnsSummory(13);
                } else {
                    $("#sl2").css("width", "18%");
                    $("#sl7").css("width", "18%");
                    TableView.WidthColumnsBase(5, 25);
                    TableView.WidthColumnsSummory(18);
                }
                break;
            case 3:
                if (cheked) {
                    $("#sl3").css("width", "13%");
                    $("#sl8").css("width", "13%");
                    TableView.WidthColumnsBase(5, 20);
                    TableView.WidthColumnsSummory(13);
                }
                else {
                    $("#sl3").css("width", "18%");
                    $("#sl8").css("width", "18%");
                    TableView.WidthColumnsBase(5, 25);
                    TableView.WidthColumnsSummory(18);
                }
                break;
            case 4:
                if (cheked) {
                    $("#sl4").css("width", "13%");
                    $("#sl9").css("width", "13%");
                    TableView.WidthColumnsBase(5, 20);
                    TableView.WidthColumnsSummory(13);
                }
                else {
                    $("#sl4").css("width", "18%");
                    $("#sl9").css("width", "18%");
                    TableView.WidthColumnsBase(5, 25);
                    TableView.WidthColumnsSummory(18);
                }
                break;
            case 5:
                if (cheked) {
                    $("#sl5").css("width", "13%");
                    $("#sl10").css("width", "13%");
                    TableView.WidthColumnsBase(5, 20);
                    TableView.WidthColumnsSummory(13);
                }
                else {
                    $("#sl5").css("width", "18%");
                    $("#sl10").css("width", "18%");
                    TableView.WidthColumnsBase(5, 25);
                    TableView.WidthColumnsSummory(18);
                }
                break;
            default:
                if (cheked) {
                    $("#sl14").css("width", "18%");
                    $("#sl13").css("width", "18%");
                    TableView.WidthColumnsBase(5, 20);
                }
                else {
                    $("#sl14").css("width", "35%");
                    $("#sl13").css("width", "35%");
                    TableView.WidthColumnsBase(5, 25);
                }
                break;
        }
    },

    Pagination: function () {
        if (window.innerWidth <= 720) {
            $(".table-pagination").jPages({
                containerID: "product-table tbody",
                pause: false,
                clickStop: true,
                perPage: 1000,
                animation: "zoomIn"
            });
        }
        else {
            $(".table-pagination").jPages({
                containerID: "product-table tbody",
                pause: false,
                clickStop: true,
                perPage: 16,
                animation: "zoomIn"
            });
            $(".table-pagination").css("display", "flex");
            $(".slider-buttons").css("display", "flex");
        }
    },

    Tooltip: function () {
        var tooltip = $(".price-popup").tooltip({
            tooltipClass: "price-mini-popup",
            open: function (event, ui) {
                var e = $(this);
                setTimeout(function () {
                    e.tooltip('close')
                }, 3500);

            }
        });
    },

    ShowDailyChange: function (index) {
        $(".table-row-" + index).css("display", "table-cell");
    },

    HideDailyChange: function () {
        $(".table-view-row").css("display", "none");
    },

    ShowPrecentChange: function () {
        $(".table-row-6").css("display", "table-cell");
    },

    HidePrecentChange: function () {
        $(".table-row-6").css("display", "none");
    }
}

var TableViewQuery = {

    Init: function () {

        TableViewQuery.BrackPoints();
    },
    BrackPoints: function () {

        if (matchMedia) {
            var mqMobile = window.matchMedia('(max-device-width:740px)');
            mqMobile.addListener(TableViewQuery.ChangePositionMobil);
            TableViewQuery.ChangePositionMobile(mqMobile);
        }
    },
    ChangePositionMobile: function (mqMobile) {
        if (mqMobile.matches) {
            $(".table-pagination").jPages({
                containerID: "product-table tbody",
                pause: false,
                clickStop: true,
                perPage: 1000,
                animation: "zoomIn"
            });
        }
    },
    ChangePositionDesktop: function () {
        if (mqDesktop.matches) {
            $(".table-pagination").jPages({
                containerID: "product-table tbody",
                pause: false,
                clickStop: true,
                perPage: 16,
                animation: "zoomIn"
            });
        }
    }
}
;

var PopUps = {

    MouseIn: false,

    Init: function () {
        PopUps.Events();
    },

    Events: function () {
        $(".close-popup").on("click", function () {
            PopUps.ClosePopUp();
        });
        $("#btnPrintAll").on("click", function () {
            if (Price.Items.length > 0) {
                if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {
                    win = window.open("/Prices/Print" + PanelCalculate.GetQueryString());
                    win.PPClose = false;
                    win.onbeforeunload = function () {
                        if (win.PPClose === false) {
                            return '';
                        }
                    }
                    win.print();
                    win.PPClose = true;
                } else {
                    win = window.open("/Prices/Print" + PanelCalculate.GetQueryString());
                    win.focus();
                    $(win.document).ready(function () {
                        win.print();
                        win.close();
                    });
                }
            }
            //PanelControl.PrintAll();
        });

        $("#btnPrintCustom").on("click", function () {
            PanelControl.PrintCustom();
        });

        $('.popup').on('click', function () {
            if (!PopUps.MouseIn) {
                PopUps.ClosePopUp();
            }
        });

        $('.content-popup').on('mouseenter', function () {
            PopUps.MouseIn = true;
        }).on('mouseleave', function () {
            PopUps.MouseIn = false;
        });
    },

    ClosePopUp: function () {
        $(".popup").css("display", "none");
    },

    ShowPopUp: function (index) {
        $(".popup").css("display", "flex");
        $(".body-popup").css("display", "none");
        $("#type" + index).css("display", "");
    }
};


function getRGBA(hex, alpha) {
    var r = parseInt(hex.slice(1, 3), 16),
        g = parseInt(hex.slice(3, 5), 16),
        b = parseInt(hex.slice(5, 7), 16);

    if (alpha) {
        return "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
    } else {
        return "rgb(" + r + ", " + g + ", " + b + ")";
    }
}
;
